{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar errors = require('./errors');\n\nvar asStream = require('./as-stream');\n\nvar asPromise = require('./as-promise');\n\nvar normalizeArguments = require('./normalize-arguments');\n\nvar merge = require('./merge');\n\nvar deepFreeze = require('./utils/deep-freeze');\n\nvar getPromiseOrStream = function getPromiseOrStream(options) {\n  return options.stream ? asStream(options) : asPromise(options);\n};\n\nvar aliases = ['get', 'post', 'put', 'patch', 'head', 'delete'];\n\nvar create = function create(defaults) {\n  defaults = merge({}, defaults);\n  normalizeArguments.preNormalize(defaults.options);\n\n  if (!defaults.handler) {\n    // This can't be getPromiseOrStream, because when merging\n    // the chain would stop at this point and no further handlers would be called.\n    defaults.handler = function (options, next) {\n      return next(options);\n    };\n  }\n\n  function got(url, options) {\n    try {\n      return defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);\n    } catch (error) {\n      if (options && options.stream) {\n        throw error;\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  got.create = create;\n\n  got.extend = function (options) {\n    var mutableDefaults;\n\n    if (options && Reflect.has(options, 'mutableDefaults')) {\n      mutableDefaults = options.mutableDefaults;\n      delete options.mutableDefaults;\n    } else {\n      mutableDefaults = defaults.mutableDefaults;\n    }\n\n    return create({\n      options: merge.options(defaults.options, options),\n      handler: defaults.handler,\n      mutableDefaults: mutableDefaults\n    });\n  };\n\n  got.mergeInstances = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return create(merge.instances(args));\n  };\n\n  got.stream = function (url, options) {\n    return got(url, _objectSpread({}, options, {\n      stream: true\n    }));\n  };\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var method = _step.value;\n\n      got[method] = function (url, options) {\n        return got(url, _objectSpread({}, options, {\n          method: method\n        }));\n      };\n\n      got.stream[method] = function (url, options) {\n        return got.stream(url, _objectSpread({}, options, {\n          method: method\n        }));\n      };\n    };\n\n    for (var _iterator = aliases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  Object.assign(got, _objectSpread({}, errors, {\n    mergeOptions: merge.options\n  }));\n  Object.defineProperty(got, 'defaults', {\n    value: defaults.mutableDefaults ? defaults : deepFreeze(defaults),\n    writable: defaults.mutableDefaults,\n    configurable: defaults.mutableDefaults,\n    enumerable: true\n  });\n  return got;\n};\n\nmodule.exports = create;","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/@vitalets/google-translate-api/node_modules/got/source/create.js"],"names":["errors","require","asStream","asPromise","normalizeArguments","merge","deepFreeze","getPromiseOrStream","options","stream","aliases","create","defaults","preNormalize","handler","next","got","url","error","Promise","reject","extend","mutableDefaults","Reflect","has","mergeInstances","args","instances","method","Object","assign","mergeOptions","defineProperty","value","writable","configurable","enumerable","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst errors = require('./errors');\nconst asStream = require('./as-stream');\nconst asPromise = require('./as-promise');\nconst normalizeArguments = require('./normalize-arguments');\nconst merge = require('./merge');\nconst deepFreeze = require('./utils/deep-freeze');\n\nconst getPromiseOrStream = options => options.stream ? asStream(options) : asPromise(options);\n\nconst aliases = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst create = defaults => {\n\tdefaults = merge({}, defaults);\n\tnormalizeArguments.preNormalize(defaults.options);\n\n\tif (!defaults.handler) {\n\t\t// This can't be getPromiseOrStream, because when merging\n\t\t// the chain would stop at this point and no further handlers would be called.\n\t\tdefaults.handler = (options, next) => next(options);\n\t}\n\n\tfunction got(url, options) {\n\t\ttry {\n\t\t\treturn defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);\n\t\t} catch (error) {\n\t\t\tif (options && options.stream) {\n\t\t\t\tthrow error;\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tgot.create = create;\n\tgot.extend = options => {\n\t\tlet mutableDefaults;\n\t\tif (options && Reflect.has(options, 'mutableDefaults')) {\n\t\t\tmutableDefaults = options.mutableDefaults;\n\t\t\tdelete options.mutableDefaults;\n\t\t} else {\n\t\t\tmutableDefaults = defaults.mutableDefaults;\n\t\t}\n\n\t\treturn create({\n\t\t\toptions: merge.options(defaults.options, options),\n\t\t\thandler: defaults.handler,\n\t\t\tmutableDefaults\n\t\t});\n\t};\n\n\tgot.mergeInstances = (...args) => create(merge.instances(args));\n\n\tgot.stream = (url, options) => got(url, {...options, stream: true});\n\n\tfor (const method of aliases) {\n\t\tgot[method] = (url, options) => got(url, {...options, method});\n\t\tgot.stream[method] = (url, options) => got.stream(url, {...options, method});\n\t}\n\n\tObject.assign(got, {...errors, mergeOptions: merge.options});\n\tObject.defineProperty(got, 'defaults', {\n\t\tvalue: defaults.mutableDefaults ? defaults : deepFreeze(defaults),\n\t\twritable: defaults.mutableDefaults,\n\t\tconfigurable: defaults.mutableDefaults,\n\t\tenumerable: true\n\t});\n\n\treturn got;\n};\n\nmodule.exports = create;\n"]},"metadata":{},"sourceType":"script"}