{"ast":null,"code":"var isWindows = process.platform === 'win32';\n\nvar path = require('path');\n\nvar exec = require('child_process').exec;\n\nvar osTmpdir = require('os-tmpdir');\n\nvar osHomedir = require('os-homedir'); // looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\n\n\nfunction memo(key, lookup, fallback) {\n  var fell = false;\n  var falling = false;\n\n  exports[key] = function (cb) {\n    var val = lookup();\n\n    if (!val && !fell && !falling && fallback) {\n      fell = true;\n      falling = true;\n      exec(fallback, function (er, output, stderr) {\n        falling = false;\n        if (er) return; // oh well, we tried\n\n        val = output.trim();\n      });\n    }\n\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val));\n      return val;\n    };\n\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val));\n    return val;\n  };\n}\n\nmemo('user', function () {\n  return isWindows ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME : process.env.USER;\n}, 'whoami');\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1;\n});\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME;\n}, 'hostname');\nmemo('tmpdir', function () {\n  return osTmpdir();\n});\nmemo('home', function () {\n  return osHomedir();\n});\nmemo('path', function () {\n  return (process.env.PATH || process.env.Path || process.env.path).split(isWindows ? ';' : ':');\n});\nmemo('editor', function () {\n  return process.env.EDITOR || process.env.VISUAL || (isWindows ? 'notepad.exe' : 'vi');\n});\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd' : process.env.SHELL || 'bash';\n});","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/osenv/osenv.js"],"names":["isWindows","process","platform","path","require","exec","osTmpdir","osHomedir","memo","key","lookup","fallback","fell","falling","exports","cb","val","er","output","stderr","trim","nextTick","bind","env","USERDOMAIN","USERNAME","USER","PROMPT","PS1","COMPUTERNAME","HOSTNAME","PATH","Path","split","EDITOR","VISUAL","ComSpec","SHELL"],"mappings":"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","sourcesContent":["var isWindows = process.platform === 'win32'\nvar path = require('path')\nvar exec = require('child_process').exec\nvar osTmpdir = require('os-tmpdir')\nvar osHomedir = require('os-homedir')\n\n// looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\nfunction memo (key, lookup, fallback) {\n  var fell = false\n  var falling = false\n  exports[key] = function (cb) {\n    var val = lookup()\n    if (!val && !fell && !falling && fallback) {\n      fell = true\n      falling = true\n      exec(fallback, function (er, output, stderr) {\n        falling = false\n        if (er) return // oh well, we tried\n        val = output.trim()\n      })\n    }\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val))\n      return val\n    }\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val))\n    return val\n  }\n}\n\nmemo('user', function () {\n  return ( isWindows\n         ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME\n         : process.env.USER\n         )\n}, 'whoami')\n\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1\n})\n\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME\n}, 'hostname')\n\nmemo('tmpdir', function () {\n  return osTmpdir()\n})\n\nmemo('home', function () {\n  return osHomedir()\n})\n\nmemo('path', function () {\n  return (process.env.PATH ||\n          process.env.Path ||\n          process.env.path).split(isWindows ? ';' : ':')\n})\n\nmemo('editor', function () {\n  return process.env.EDITOR ||\n         process.env.VISUAL ||\n         (isWindows ? 'notepad.exe' : 'vi')\n})\n\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd'\n         : process.env.SHELL || 'bash'\n})\n"]},"metadata":{},"sourceType":"script"}