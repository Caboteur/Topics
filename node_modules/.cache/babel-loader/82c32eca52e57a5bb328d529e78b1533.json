{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"D:\\\\MegaSync\\\\proxy-server\\\\testing\\\\react-express-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar pump = require('pump');\n\nvar bufferStream = require('./buffer-stream');\n\nvar MaxBufferError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(MaxBufferError, _Error);\n\n  function MaxBufferError() {\n    var _this;\n\n    _classCallCheck(this, MaxBufferError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaxBufferError).call(this, 'maxBuffer exceeded'));\n    _this.name = 'MaxBufferError';\n    return _this;\n  }\n\n  return MaxBufferError;\n}(_wrapNativeSuper(Error));\n\nfunction getStream(inputStream, options) {\n  if (!inputStream) {\n    return Promise.reject(new Error('Expected a stream'));\n  }\n\n  options = Object.assign({\n    maxBuffer: Infinity\n  }, options);\n  var _options = options,\n      maxBuffer = _options.maxBuffer;\n  var stream;\n  return new Promise(function (resolve, reject) {\n    var rejectPromise = function rejectPromise(error) {\n      if (error) {\n        // A null check\n        error.bufferedData = stream.getBufferedValue();\n      }\n\n      reject(error);\n    };\n\n    stream = pump(inputStream, bufferStream(options), function (error) {\n      if (error) {\n        rejectPromise(error);\n        return;\n      }\n\n      resolve();\n    });\n    stream.on('data', function () {\n      if (stream.getBufferedLength() > maxBuffer) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  }).then(function () {\n    return stream.getBufferedValue();\n  });\n}\n\nmodule.exports = getStream;\n\nmodule.exports.buffer = function (stream, options) {\n  return getStream(stream, Object.assign({}, options, {\n    encoding: 'buffer'\n  }));\n};\n\nmodule.exports.array = function (stream, options) {\n  return getStream(stream, Object.assign({}, options, {\n    array: true\n  }));\n};\n\nmodule.exports.MaxBufferError = MaxBufferError;","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/@vitalets/google-translate-api/node_modules/get-stream/index.js"],"names":["pump","require","bufferStream","MaxBufferError","name","Error","getStream","inputStream","options","Promise","reject","Object","assign","maxBuffer","Infinity","stream","resolve","rejectPromise","error","bufferedData","getBufferedValue","on","getBufferedLength","then","module","exports","buffer","encoding","array"],"mappings":"AAAA;;;;;;;;;;;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;IAEME,c;;;;;AACL,4BAAc;AAAA;;AAAA;;AACb,wFAAM,oBAAN;AACA,UAAKC,IAAL,GAAY,gBAAZ;AAFa;AAGb;;;mBAJ2BC,K;;AAO7B,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AACxC,MAAI,CAACD,WAAL,EAAkB;AACjB,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIL,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACA;;AAEDG,EAAAA,OAAO,GAAGG,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,SAAS,EAAEC;AAAZ,GAAd,EAAqCN,OAArC,CAAV;AALwC,iBAOpBA,OAPoB;AAAA,MAOjCK,SAPiC,YAOjCA,SAPiC;AASxC,MAAIE,MAAJ;AACA,SAAO,IAAIN,OAAJ,CAAY,UAACO,OAAD,EAAUN,MAAV,EAAqB;AACvC,QAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC9B,UAAIA,KAAJ,EAAW;AAAE;AACZA,QAAAA,KAAK,CAACC,YAAN,GAAqBJ,MAAM,CAACK,gBAAP,EAArB;AACA;;AACDV,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACA,KALD;;AAOAH,IAAAA,MAAM,GAAGf,IAAI,CAACO,WAAD,EAAcL,YAAY,CAACM,OAAD,CAA1B,EAAqC,UAAAU,KAAK,EAAI;AAC1D,UAAIA,KAAJ,EAAW;AACVD,QAAAA,aAAa,CAACC,KAAD,CAAb;AACA;AACA;;AAEDF,MAAAA,OAAO;AACP,KAPY,CAAb;AASAD,IAAAA,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,YAAM;AACvB,UAAIN,MAAM,CAACO,iBAAP,KAA6BT,SAAjC,EAA4C;AAC3CI,QAAAA,aAAa,CAAC,IAAId,cAAJ,EAAD,CAAb;AACA;AACD,KAJD;AAKA,GAtBM,EAsBJoB,IAtBI,CAsBC;AAAA,WAAMR,MAAM,CAACK,gBAAP,EAAN;AAAA,GAtBD,CAAP;AAuBA;;AAEDI,MAAM,CAACC,OAAP,GAAiBnB,SAAjB;;AACAkB,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,UAACX,MAAD,EAASP,OAAT;AAAA,SAAqBF,SAAS,CAACS,MAAD,EAASJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2B;AAACmB,IAAAA,QAAQ,EAAE;AAAX,GAA3B,CAAT,CAA9B;AAAA,CAAxB;;AACAH,MAAM,CAACC,OAAP,CAAeG,KAAf,GAAuB,UAACb,MAAD,EAASP,OAAT;AAAA,SAAqBF,SAAS,CAACS,MAAD,EAASJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2B;AAACoB,IAAAA,KAAK,EAAE;AAAR,GAA3B,CAAT,CAA9B;AAAA,CAAvB;;AACAJ,MAAM,CAACC,OAAP,CAAetB,cAAf,GAAgCA,cAAhC","sourcesContent":["'use strict';\nconst pump = require('pump');\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nfunction getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\toptions = Object.assign({maxBuffer: Infinity}, options);\n\n\tconst {maxBuffer} = options;\n\n\tlet stream;\n\treturn new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\tif (error) { // A null check\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\t\t\treject(error);\n\t\t};\n\n\t\tstream = pump(inputStream, bufferStream(options), error => {\n\t\t\tif (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t}).then(() => stream.getBufferedValue());\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, Object.assign({}, options, {encoding: 'buffer'}));\nmodule.exports.array = (stream, options) => getStream(stream, Object.assign({}, options, {array: true}));\nmodule.exports.MaxBufferError = MaxBufferError;\n"]},"metadata":{},"sourceType":"script"}