{"ast":null,"code":"import wiki from 'wikijs';\n\nvar wikiped = function wikiped(data) {\n  var wikiSearchReturnValues = [];\n  var url = \"https://fr.wikipedia.org/w/api.php\";\n  var params = {\n    action: 'query',\n    list: 'search',\n    srsearch: data,\n    format: 'json'\n  };\n  url = url + '?origin=*';\n  Object.keys(params).forEach(function (key) {\n    url += \"&\" + key + \"=\" + params[key];\n  });\n  fetch(url).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    for (var key in response.query.search) {\n      wikiSearchReturnValues.push({\n        queryResultPageFullURL: 'no link',\n        queryResultPageID: response.query.search[key].pageid,\n        queryResultPageTitle: response.query.search[key].title,\n        queryResultPageSnippet: response.query.search[key].snippet\n      });\n    }\n  }).then(function (response) {\n    if (wikiSearchReturnValues[0] != []) {\n      var jo = function jo() {\n        console.log(op);\n        wiki({\n          apiUrl: 'https://fr.wikipedia.org/w/api.php'\n        }).page(data).then(function (page) {\n          return console.log(page.info);\n        });\n      };\n\n      var page = wikiSearchReturnValues[0];\n      var pageID = page.queryResultPageID;\n      var urlForRetrievingPageURLByPageID = \"https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=\".concat(pageID, \"&inprop=url&format=json\");\n      var op = wikiSearchReturnValues[0].queryResultPageTitle;\n      console.log(op);\n      jo();\n      fetch(urlForRetrievingPageURLByPageID).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\n        console.log(page.queryResultPageFullURL);\n      });\n    }\n  });\n};\n\nexport default wikiped;","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/src/components/Api/wikiped.js"],"names":["wiki","wikiped","data","wikiSearchReturnValues","url","params","action","list","srsearch","format","Object","keys","forEach","key","fetch","then","response","json","query","search","push","queryResultPageFullURL","queryResultPageID","pageid","queryResultPageTitle","title","queryResultPageSnippet","snippet","jo","console","log","op","apiUrl","page","info","pageID","urlForRetrievingPageURLByPageID","pages","fullurl"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEC,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAQ;AAEtB,MAAMC,sBAAsB,GAAG,EAA/B;AAEE,MAAIC,GAAG,GAAG,oCAAV;AAEA,MAAIC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,OADG;AAEXC,IAAAA,IAAI,EAAE,QAFK;AAGXC,IAAAA,QAAQ,EAAEN,IAHC;AAIXO,IAAAA,MAAM,EAAE;AAJG,GAAb;AAOAL,EAAAA,GAAG,GAAGA,GAAG,GAAG,WAAZ;AACAM,EAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnCT,IAAAA,GAAG,IAAI,MAAMS,GAAN,GAAY,GAAZ,GAAkBR,MAAM,CAACQ,GAAD,CAA/B;AACD,GAFD;AAIAC,EAAAA,KAAK,CAACV,GAAD,CAAL,CACGW,IADH,CAEI,UAAUC,QAAV,EAAoB;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAJL,EAMGF,IANH,CAOI,UAAUC,QAAV,EAAoB;AAGlB,SAAK,IAAIH,GAAT,IAAgBG,QAAQ,CAACE,KAAT,CAAeC,MAA/B,EAAuC;AACtChB,MAAAA,sBAAsB,CAACiB,IAAvB,CAA4B;AACzBC,QAAAA,sBAAsB,EAAE,SADC;AAEzBC,QAAAA,iBAAiB,EAAEN,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2BU,MAFrB;AAGzBC,QAAAA,oBAAoB,EAAER,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2BY,KAHxB;AAIzBC,QAAAA,sBAAsB,EAAEV,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2Bc;AAJ1B,OAA5B;AAMA;AACF,GAlBL,EAoBGZ,IApBH,CAqBI,UAAUC,QAAV,EAAoB;AACjB,QAAIb,sBAAsB,CAAC,CAAD,CAAtB,IAA6B,EAAjC,EAAoC;AAAA,UAM1ByB,EAN0B,GAMnC,SAASA,EAAT,GAAa;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACA/B,QAAAA,IAAI,CAAC;AAAEgC,UAAAA,MAAM,EAAE;AAAV,SAAD,CAAJ,CAECC,IAFD,CAEM/B,IAFN,EAGDa,IAHC,CAGI,UAAAkB,IAAI;AAAA,iBAAIJ,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACC,IAAjB,CAAJ;AAAA,SAHR;AAKD,OAbkC;;AACnC,UAAID,IAAI,GAAG9B,sBAAsB,CAAC,CAAD,CAAjC;AACA,UAAIgC,MAAM,GAAGF,IAAI,CAACX,iBAAlB;AACA,UAAIc,+BAA+B,wFAAiFD,MAAjF,4BAAnC;AACA,UAAMJ,EAAE,GAAG5B,sBAAsB,CAAC,CAAD,CAAtB,CAA0BqB,oBAArC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AASAH,MAAAA,EAAE;AAEFd,MAAAA,KAAK,CAACsB,+BAAD,CAAL,CACGrB,IADH,CAEI,UAAUC,QAAV,EAAoB;AAElB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OALL,EAOGF,IAPH,CAQI,UAAUC,QAAV,EAAoB;AAClBiB,QAAAA,IAAI,CAACZ,sBAAL,GAA8BL,QAAQ,CAACE,KAAT,CAAemB,KAAf,CAAqBF,MAArB,EAA6BG,OAA3D;AACDT,QAAAA,OAAO,CAACC,GAAR,CAAaG,IAAI,CAACZ,sBAAlB;AAEA,OAZL;AAcD;AACF,GArDL;AAwDD,CA1EH;;AA+ED,eAAepB,OAAf","sourcesContent":["import wiki from 'wikijs'\r\n\r\n const wikiped = (data)=>{\r\n\r\n   const wikiSearchReturnValues = []\r\n\r\n     var url = \"https://fr.wikipedia.org/w/api.php\";\r\n\r\n     var params = {\r\n       action: 'query',\r\n       list: 'search',\r\n       srsearch: data,\r\n       format: 'json'\r\n     };\r\n\r\n     url = url + '?origin=*';\r\n     Object.keys(params).forEach((key) => {\r\n       url += \"&\" + key + \"=\" + params[key];\r\n     });\r\n\r\n     fetch(url)\r\n       .then(\r\n         function (response) {\r\n           return response.json();\r\n         }\r\n       )\r\n       .then(\r\n         function (response) {\r\n\r\n\r\n           for (var key in response.query.search) {\r\n            wikiSearchReturnValues.push({\r\n               queryResultPageFullURL: 'no link',\r\n               queryResultPageID: response.query.search[key].pageid,\r\n               queryResultPageTitle: response.query.search[key].title,\r\n               queryResultPageSnippet: response.query.search[key].snippet\r\n             });\r\n           }\r\n         }\r\n       )\r\n       .then(\r\n         function (response) {\r\n            if (wikiSearchReturnValues[0] != []){\r\n             let page = wikiSearchReturnValues[0];\r\n             let pageID = page.queryResultPageID;\r\n             let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\r\n             const op = wikiSearchReturnValues[0].queryResultPageTitle;\r\n             console.log(op)\r\n             function jo(){\r\n               console.log(op)\r\n               wiki({ apiUrl: 'https://fr.wikipedia.org/w/api.php' })\r\n\r\n               .page(data)\r\n             .then(page => console.log(page.info))\r\n\r\n             }\r\n             jo()\r\n\r\n             fetch(urlForRetrievingPageURLByPageID)\r\n               .then(\r\n                 function (response) {\r\n\r\n                   return response.json();\r\n                 }\r\n               )\r\n               .then(\r\n                 function (response) {\r\n                   page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\r\n                  console.log( page.queryResultPageFullURL)\r\n\r\n                 }\r\n               )\r\n           }\r\n         }\r\n       )\r\n\r\n   }\r\n\r\n\r\n\r\n\r\nexport default wikiped\r\n"]},"metadata":{},"sourceType":"module"}