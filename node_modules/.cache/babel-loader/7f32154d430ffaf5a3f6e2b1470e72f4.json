{"ast":null,"code":"/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\nmodule.exports = asyncMap;\n\nfunction asyncMap() {\n  var steps = Array.prototype.slice.call(arguments),\n      list = steps.shift() || [],\n      cb_ = steps.pop();\n  if (typeof cb_ !== \"function\") throw new Error(\"No callback provided to asyncMap\");\n  if (!list) return cb_(null, []);\n  if (!Array.isArray(list)) list = [list];\n  var n = steps.length,\n      data = [] // 2d array\n  ,\n      errState = null,\n      l = list.length,\n      a = l * n;\n  if (!a) return cb_(null, []);\n\n  function cb(er) {\n    if (er && !errState) errState = er;\n    var argLen = arguments.length;\n\n    for (var i = 1; i < argLen; i++) {\n      if (arguments[i] !== undefined) {\n        data[i - 1] = (data[i - 1] || []).concat(arguments[i]);\n      }\n    } // see if any new things have been added.\n\n\n    if (list.length > l) {\n      var newList = list.slice(l);\n      a += (list.length - l) * n;\n      l = list.length;\n      process.nextTick(function () {\n        newList.forEach(function (ar) {\n          steps.forEach(function (fn) {\n            fn(ar, cb);\n          });\n        });\n      });\n    }\n\n    if (--a === 0) cb_.apply(null, [errState].concat(data));\n  } // expect the supplied cb function to be called\n  // \"n\" times for each thing in the array.\n\n\n  list.forEach(function (ar) {\n    steps.forEach(function (fn) {\n      fn(ar, cb);\n    });\n  });\n}","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/slide/lib/async-map.js"],"names":["module","exports","asyncMap","steps","Array","prototype","slice","call","arguments","list","shift","cb_","pop","Error","isArray","n","length","data","errState","l","a","cb","er","argLen","i","undefined","concat","newList","process","nextTick","forEach","ar","fn","apply"],"mappings":"AACA;;;;;;;;;AAUAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,GAAqB;AACnB,MAAIC,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAZ;AAAA,MACIC,IAAI,GAAGN,KAAK,CAACO,KAAN,MAAiB,EAD5B;AAAA,MAEIC,GAAG,GAAGR,KAAK,CAACS,GAAN,EAFV;AAGA,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B,MAAM,IAAIE,KAAJ,CACnC,kCADmC,CAAN;AAE/B,MAAI,CAACJ,IAAL,EAAW,OAAOE,GAAG,CAAC,IAAD,EAAO,EAAP,CAAV;AACX,MAAI,CAACP,KAAK,CAACU,OAAN,CAAcL,IAAd,CAAL,EAA0BA,IAAI,GAAG,CAACA,IAAD,CAAP;AAC1B,MAAIM,CAAC,GAAGZ,KAAK,CAACa,MAAd;AAAA,MACIC,IAAI,GAAG,EADX,CACc;AADd;AAAA,MAEIC,QAAQ,GAAG,IAFf;AAAA,MAGIC,CAAC,GAAGV,IAAI,CAACO,MAHb;AAAA,MAIII,CAAC,GAAGD,CAAC,GAAGJ,CAJZ;AAKA,MAAI,CAACK,CAAL,EAAQ,OAAOT,GAAG,CAAC,IAAD,EAAO,EAAP,CAAV;;AACR,WAASU,EAAT,CAAaC,EAAb,EAAiB;AACf,QAAIA,EAAE,IAAI,CAACJ,QAAX,EAAqBA,QAAQ,GAAGI,EAAX;AAErB,QAAIC,MAAM,GAAGf,SAAS,CAACQ,MAAvB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B;AAAkC,UAAIhB,SAAS,CAACgB,CAAD,CAAT,KAAiBC,SAArB,EAAgC;AAChER,QAAAA,IAAI,CAACO,CAAC,GAAG,CAAL,CAAJ,GAAc,CAACP,IAAI,CAACO,CAAC,GAAG,CAAL,CAAJ,IAAe,EAAhB,EAAoBE,MAApB,CAA2BlB,SAAS,CAACgB,CAAD,CAApC,CAAd;AACD;AAFD,KAJe,CAOf;;;AACA,QAAIf,IAAI,CAACO,MAAL,GAAcG,CAAlB,EAAqB;AACnB,UAAIQ,OAAO,GAAGlB,IAAI,CAACH,KAAL,CAAWa,CAAX,CAAd;AACAC,MAAAA,CAAC,IAAI,CAACX,IAAI,CAACO,MAAL,GAAcG,CAAf,IAAoBJ,CAAzB;AACAI,MAAAA,CAAC,GAAGV,IAAI,CAACO,MAAT;AACAY,MAAAA,OAAO,CAACC,QAAR,CAAiB,YAAY;AAC3BF,QAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,EAAV,EAAc;AAC5B5B,UAAAA,KAAK,CAAC2B,OAAN,CAAc,UAAUE,EAAV,EAAc;AAAEA,YAAAA,EAAE,CAACD,EAAD,EAAKV,EAAL,CAAF;AAAY,WAA1C;AACD,SAFD;AAGD,OAJD;AAKD;;AAED,QAAI,EAAED,CAAF,KAAQ,CAAZ,EAAeT,GAAG,CAACsB,KAAJ,CAAU,IAAV,EAAgB,CAACf,QAAD,EAAWQ,MAAX,CAAkBT,IAAlB,CAAhB;AAChB,GAlCkB,CAmCnB;AACA;;;AACAR,EAAAA,IAAI,CAACqB,OAAL,CAAa,UAAUC,EAAV,EAAc;AACzB5B,IAAAA,KAAK,CAAC2B,OAAN,CAAc,UAAUE,EAAV,EAAc;AAAEA,MAAAA,EAAE,CAACD,EAAD,EAAKV,EAAL,CAAF;AAAY,KAA1C;AACD,GAFD;AAGD","sourcesContent":["\n/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\n\nmodule.exports = asyncMap\n\nfunction asyncMap () {\n  var steps = Array.prototype.slice.call(arguments)\n    , list = steps.shift() || []\n    , cb_ = steps.pop()\n  if (typeof cb_ !== \"function\") throw new Error(\n    \"No callback provided to asyncMap\")\n  if (!list) return cb_(null, [])\n  if (!Array.isArray(list)) list = [list]\n  var n = steps.length\n    , data = [] // 2d array\n    , errState = null\n    , l = list.length\n    , a = l * n\n  if (!a) return cb_(null, [])\n  function cb (er) {\n    if (er && !errState) errState = er\n\n    var argLen = arguments.length\n    for (var i = 1; i < argLen; i ++) if (arguments[i] !== undefined) {\n      data[i - 1] = (data[i - 1] || []).concat(arguments[i])\n    }\n    // see if any new things have been added.\n    if (list.length > l) {\n      var newList = list.slice(l)\n      a += (list.length - l) * n\n      l = list.length\n      process.nextTick(function () {\n        newList.forEach(function (ar) {\n          steps.forEach(function (fn) { fn(ar, cb) })\n        })\n      })\n    }\n\n    if (--a === 0) cb_.apply(null, [errState].concat(data))\n  }\n  // expect the supplied cb function to be called\n  // \"n\" times for each thing in the array.\n  list.forEach(function (ar) {\n    steps.forEach(function (fn) { fn(ar, cb) })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}