{"ast":null,"code":"var wikiped = function wikiped(data) {\n  var result = [];\n  var url = \"https://fr.wikipedia.org/w/api.php\";\n  var params = {\n    action: 'query',\n    list: 'search',\n    srsearch: data,\n    format: 'json'\n  };\n  url = url + '?origin=*';\n  Object.keys(params).forEach(function (key) {\n    url += \"&\" + key + \"=\" + params[key];\n  });\n  fetch(url).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    for (var key in response.query.search) {\n      pointerToThis.state.wikiSearchReturnValues.push({\n        queryResultPageFullURL: 'no link',\n        queryResultPageID: response.query.search[key].pageid,\n        queryResultPageTitle: response.query.search[key].title,\n        queryResultPageSnippet: response.query.search[key].snippet\n      });\n    }\n  }).then(function (response) {\n    var _loop = function _loop() {\n      // console.log(pointerToThis.state.wikiSearchReturnValues);\n      var page = pointerToThis.state.wikiSearchReturnValues[key2];\n      var pageID = page.queryResultPageID;\n      var urlForRetrievingPageURLByPageID = \"https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=\".concat(pageID, \"&inprop=url&format=json\");\n      fetch(urlForRetrievingPageURLByPageID).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\n      });\n    };\n\n    for (var key2 in pointerToThis.state.wikiSearchReturnValues) {\n      _loop();\n    }\n  });\n};\n\nexport default wikiped;","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/src/components/Api/wikiped.js"],"names":["wikiped","data","result","url","params","action","list","srsearch","format","Object","keys","forEach","key","fetch","then","response","json","query","search","pointerToThis","state","wikiSearchReturnValues","push","queryResultPageFullURL","queryResultPageID","pageid","queryResultPageTitle","title","queryResultPageSnippet","snippet","page","key2","pageID","urlForRetrievingPageURLByPageID","pages","fullurl"],"mappings":"AAIC,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAQ;AAEtB,MAAMC,MAAM,GAAG,EAAf;AAEE,MAAIC,GAAG,GAAG,oCAAV;AAEA,MAAIC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,OADG;AAEXC,IAAAA,IAAI,EAAE,QAFK;AAGXC,IAAAA,QAAQ,EAAEN,IAHC;AAIXO,IAAAA,MAAM,EAAE;AAJG,GAAb;AAOAL,EAAAA,GAAG,GAAGA,GAAG,GAAG,WAAZ;AACAM,EAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnCT,IAAAA,GAAG,IAAI,MAAMS,GAAN,GAAY,GAAZ,GAAkBR,MAAM,CAACQ,GAAD,CAA/B;AACD,GAFD;AAIAC,EAAAA,KAAK,CAACV,GAAD,CAAL,CACGW,IADH,CAEI,UAAUC,QAAV,EAAoB;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAJL,EAMGF,IANH,CAOI,UAAUC,QAAV,EAAoB;AAGlB,SAAK,IAAIH,GAAT,IAAgBG,QAAQ,CAACE,KAAT,CAAeC,MAA/B,EAAuC;AACrCC,MAAAA,aAAa,CAACC,KAAd,CAAoBC,sBAApB,CAA2CC,IAA3C,CAAgD;AAC9CC,QAAAA,sBAAsB,EAAE,SADsB;AAE9CC,QAAAA,iBAAiB,EAAET,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2Ba,MAFA;AAG9CC,QAAAA,oBAAoB,EAAEX,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2Be,KAHH;AAI9CC,QAAAA,sBAAsB,EAAEb,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBN,GAAtB,EAA2BiB;AAJL,OAAhD;AAMD;AACF,GAlBL,EAoBGf,IApBH,CAqBI,UAAUC,QAAV,EAAoB;AAAA;AAEhB;AACA,UAAIe,IAAI,GAAGX,aAAa,CAACC,KAAd,CAAoBC,sBAApB,CAA2CU,IAA3C,CAAX;AACA,UAAIC,MAAM,GAAGF,IAAI,CAACN,iBAAlB;AACA,UAAIS,+BAA+B,wFAAiFD,MAAjF,4BAAnC;AAEAnB,MAAAA,KAAK,CAACoB,+BAAD,CAAL,CACGnB,IADH,CAEI,UAAUC,QAAV,EAAoB;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAJL,EAMGF,IANH,CAOI,UAAUC,QAAV,EAAoB;AAClBe,QAAAA,IAAI,CAACP,sBAAL,GAA8BR,QAAQ,CAACE,KAAT,CAAeiB,KAAf,CAAqBF,MAArB,EAA6BG,OAA3D;AAGD,OAXL;AAPgB;;AAClB,SAAK,IAAIJ,IAAT,IAAiBZ,aAAa,CAACC,KAAd,CAAoBC,sBAArC,EAA6D;AAAA;AAmB5D;AACF,GA1CL;AA4CD,CA9DH;;AAmED,eAAerB,OAAf","sourcesContent":["\r\n\r\n\r\n\r\n const wikiped = (data)=>{\r\n\r\n   const result = []\r\n\r\n     var url = \"https://fr.wikipedia.org/w/api.php\";\r\n\r\n     var params = {\r\n       action: 'query',\r\n       list: 'search',\r\n       srsearch: data,\r\n       format: 'json'\r\n     };\r\n\r\n     url = url + '?origin=*';\r\n     Object.keys(params).forEach((key) => {\r\n       url += \"&\" + key + \"=\" + params[key];\r\n     });\r\n\r\n     fetch(url)\r\n       .then(\r\n         function (response) {\r\n           return response.json();\r\n         }\r\n       )\r\n       .then(\r\n         function (response) {\r\n\r\n\r\n           for (var key in response.query.search) {\r\n             pointerToThis.state.wikiSearchReturnValues.push({\r\n               queryResultPageFullURL: 'no link',\r\n               queryResultPageID: response.query.search[key].pageid,\r\n               queryResultPageTitle: response.query.search[key].title,\r\n               queryResultPageSnippet: response.query.search[key].snippet\r\n             });\r\n           }\r\n         }\r\n       )\r\n       .then(\r\n         function (response) {\r\n           for (var key2 in pointerToThis.state.wikiSearchReturnValues) {\r\n             // console.log(pointerToThis.state.wikiSearchReturnValues);\r\n             let page = pointerToThis.state.wikiSearchReturnValues[key2];\r\n             let pageID = page.queryResultPageID;\r\n             let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\r\n\r\n             fetch(urlForRetrievingPageURLByPageID)\r\n               .then(\r\n                 function (response) {\r\n                   return response.json();\r\n                 }\r\n               )\r\n               .then(\r\n                 function (response) {\r\n                   page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\r\n\r\n\r\n                 }\r\n               )\r\n           }\r\n         }\r\n       )\r\n   }\r\n\r\n\r\n\r\n\r\nexport default wikiped\r\n"]},"metadata":{},"sourceType":"module"}