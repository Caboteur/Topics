{"ast":null,"code":"'use strict';\n\nvar decompressResponse = require('decompress-response');\n\nvar is = require('@sindresorhus/is');\n\nvar mimicResponse = require('mimic-response');\n\nvar progress = require('./progress');\n\nmodule.exports = function (response, options, emitter) {\n  var downloadBodySize = Number(response.headers['content-length']) || null;\n  var progressStream = progress.download(response, emitter, downloadBodySize);\n  mimicResponse(response, progressStream);\n  var newResponse = options.decompress === true && is.function(decompressResponse) && options.method !== 'HEAD' ? decompressResponse(progressStream) : progressStream;\n\n  if (!options.decompress && ['gzip', 'deflate'].includes(response.headers['content-encoding'])) {\n    options.encoding = null;\n  }\n\n  emitter.emit('response', newResponse);\n  emitter.emit('downloadProgress', {\n    percent: 0,\n    transferred: 0,\n    total: downloadBodySize\n  });\n  response.pipe(progressStream);\n};","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/@vitalets/google-translate-api/node_modules/got/source/get-response.js"],"names":["decompressResponse","require","is","mimicResponse","progress","module","exports","response","options","emitter","downloadBodySize","Number","headers","progressStream","download","newResponse","decompress","function","method","includes","encoding","emit","percent","transferred","total","pipe"],"mappings":"AAAA;;AACA,IAAMA,kBAAkB,GAAGC,OAAO,CAAC,qBAAD,CAAlC;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAWC,OAAX,EAAoBC,OAApB,EAAgC;AAChD,MAAMC,gBAAgB,GAAGC,MAAM,CAACJ,QAAQ,CAACK,OAAT,CAAiB,gBAAjB,CAAD,CAAN,IAA8C,IAAvE;AAEA,MAAMC,cAAc,GAAGT,QAAQ,CAACU,QAAT,CAAkBP,QAAlB,EAA4BE,OAA5B,EAAqCC,gBAArC,CAAvB;AAEAP,EAAAA,aAAa,CAACI,QAAD,EAAWM,cAAX,CAAb;AAEA,MAAME,WAAW,GAAGP,OAAO,CAACQ,UAAR,KAAuB,IAAvB,IACnBd,EAAE,CAACe,QAAH,CAAYjB,kBAAZ,CADmB,IAEnBQ,OAAO,CAACU,MAAR,KAAmB,MAFA,GAESlB,kBAAkB,CAACa,cAAD,CAF3B,GAE8CA,cAFlE;;AAIA,MAAI,CAACL,OAAO,CAACQ,UAAT,IAAuB,CAAC,MAAD,EAAS,SAAT,EAAoBG,QAApB,CAA6BZ,QAAQ,CAACK,OAAT,CAAiB,kBAAjB,CAA7B,CAA3B,EAA+F;AAC9FJ,IAAAA,OAAO,CAACY,QAAR,GAAmB,IAAnB;AACA;;AAEDX,EAAAA,OAAO,CAACY,IAAR,CAAa,UAAb,EAAyBN,WAAzB;AAEAN,EAAAA,OAAO,CAACY,IAAR,CAAa,kBAAb,EAAiC;AAChCC,IAAAA,OAAO,EAAE,CADuB;AAEhCC,IAAAA,WAAW,EAAE,CAFmB;AAGhCC,IAAAA,KAAK,EAAEd;AAHyB,GAAjC;AAMAH,EAAAA,QAAQ,CAACkB,IAAT,CAAcZ,cAAd;AACA,CAxBD","sourcesContent":["'use strict';\nconst decompressResponse = require('decompress-response');\nconst is = require('@sindresorhus/is');\nconst mimicResponse = require('mimic-response');\nconst progress = require('./progress');\n\nmodule.exports = (response, options, emitter) => {\n\tconst downloadBodySize = Number(response.headers['content-length']) || null;\n\n\tconst progressStream = progress.download(response, emitter, downloadBodySize);\n\n\tmimicResponse(response, progressStream);\n\n\tconst newResponse = options.decompress === true &&\n\t\tis.function(decompressResponse) &&\n\t\toptions.method !== 'HEAD' ? decompressResponse(progressStream) : progressStream;\n\n\tif (!options.decompress && ['gzip', 'deflate'].includes(response.headers['content-encoding'])) {\n\t\toptions.encoding = null;\n\t}\n\n\temitter.emit('response', newResponse);\n\n\temitter.emit('downloadProgress', {\n\t\tpercent: 0,\n\t\ttransferred: 0,\n\t\ttotal: downloadBodySize\n\t});\n\n\tresponse.pipe(progressStream);\n};\n"]},"metadata":{},"sourceType":"script"}