{"ast":null,"code":"// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen',\n    r20 = /%20/g,\n    rCRLF = /\\r?\\n/g,\n    _ = {\n  map: require('lodash/map')\n};\n\nexports.serialize = function () {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  var retArr = _.map(arr, function (data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  }); // Return the resulting serialization\n\n\n  return retArr.join('&').replace(r20, '+');\n};\n\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    } else {\n      return $elem.filter(submittableSelector).toArray();\n    }\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n  '[name!=\"\"]:not(:disabled)' // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  + ':not(:submit, :button, :image, :reset, :file)' // and are either checked/don't have a checkable state\n  + ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map(function (i, elem) {\n    var $elem = Cheerio(elem);\n    var name = $elem.attr('name');\n    var value = $elem.val(); // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    if (value == null) {\n      value = '';\n    } // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n\n    if (Array.isArray(value)) {\n      return _.map(value, function (val) {\n        // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n        //   These can occur inside of `<textarea>'s`\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      }); // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n    } else {\n      return {\n        name: name,\n        value: value.replace(rCRLF, '\\r\\n')\n      };\n    } // Convert our result to an array\n\n  }).get();\n};","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/cheerio/lib/api/forms.js"],"names":["submittableSelector","r20","rCRLF","_","map","require","exports","serialize","arr","serializeArray","retArr","data","encodeURIComponent","name","value","join","replace","Cheerio","constructor","elem","$elem","find","toArray","filter","i","attr","val","Array","isArray","get"],"mappings":"AAAA;AACA;AACA,IAAIA,mBAAmB,GAAG,8BAA1B;AAAA,IACIC,GAAG,GAAG,MADV;AAAA,IAEIC,KAAK,GAAG,QAFZ;AAAA,IAGIC,CAAC,GAAG;AACFC,EAAAA,GAAG,EAAEC,OAAO,CAAC,YAAD;AADV,CAHR;;AAOAC,OAAO,CAACC,SAAR,GAAoB,YAAW;AAC7B;AACA,MAAIC,GAAG,GAAG,KAAKC,cAAL,EAAV,CAF6B,CAI7B;;AACA,MAAIC,MAAM,GAAGP,CAAC,CAACC,GAAF,CAAMI,GAAN,EAAW,UAASG,IAAT,EAAe;AACrC,WAAOC,kBAAkB,CAACD,IAAI,CAACE,IAAN,CAAlB,GAAgC,GAAhC,GAAsCD,kBAAkB,CAACD,IAAI,CAACG,KAAN,CAA/D;AACD,GAFY,CAAb,CAL6B,CAS7B;;;AACA,SAAOJ,MAAM,CAACK,IAAP,CAAY,GAAZ,EAAiBC,OAAjB,CAAyBf,GAAzB,EAA8B,GAA9B,CAAP;AACD,CAXD;;AAaAK,OAAO,CAACG,cAAR,GAAyB,YAAW;AAClC;AACA,MAAIQ,OAAO,GAAG,KAAKC,WAAnB;AACA,SAAO,KAAKd,GAAL,CAAS,YAAW;AACvB,QAAIe,IAAI,GAAG,IAAX;AACA,QAAIC,KAAK,GAAGH,OAAO,CAACE,IAAD,CAAnB;;AACA,QAAIA,IAAI,CAACN,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOO,KAAK,CAACC,IAAN,CAAWrB,mBAAX,EAAgCsB,OAAhC,EAAP;AACD,KAFD,MAEO;AACL,aAAOF,KAAK,CAACG,MAAN,CAAavB,mBAAb,EAAkCsB,OAAlC,EAAP;AACD;AACF,GARI,EAQFC,MARE,EASD;AACA,8BACA;AADA,IAEE,+CAFF,CAGA;AAHA,IAIE,8CAdD,CAeL;AAfK,IAgBHnB,GAhBG,CAgBC,UAASoB,CAAT,EAAYL,IAAZ,EAAkB;AACtB,QAAIC,KAAK,GAAGH,OAAO,CAACE,IAAD,CAAnB;AACA,QAAIN,IAAI,GAAGO,KAAK,CAACK,IAAN,CAAW,MAAX,CAAX;AACA,QAAIX,KAAK,GAAGM,KAAK,CAACM,GAAN,EAAZ,CAHsB,CAKtB;;AACA,QAAIZ,KAAK,IAAI,IAAb,EAAmB;AACjBA,MAAAA,KAAK,GAAG,EAAR;AACD,KARqB,CAUtB;;;AACA,QAAIa,KAAK,CAACC,OAAN,CAAcd,KAAd,CAAJ,EAA0B;AACxB,aAAOX,CAAC,CAACC,GAAF,CAAMU,KAAN,EAAa,UAASY,GAAT,EAAc;AAChC;AACA;AACA,eAAO;AAACb,UAAAA,IAAI,EAAEA,IAAP;AAAaC,UAAAA,KAAK,EAAEY,GAAG,CAACV,OAAJ,CAAad,KAAb,EAAoB,MAApB;AAApB,SAAP;AACD,OAJM,CAAP,CADwB,CAM1B;AACC,KAPD,MAOO;AACL,aAAO;AAACW,QAAAA,IAAI,EAAEA,IAAP;AAAaC,QAAAA,KAAK,EAAEA,KAAK,CAACE,OAAN,CAAed,KAAf,EAAsB,MAAtB;AAApB,OAAP;AACD,KApBqB,CAqBxB;;AACC,GAtCI,EAsCF2B,GAtCE,EAAP;AAuCD,CA1CD","sourcesContent":["// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen',\n    r20 = /%20/g,\n    rCRLF = /\\r?\\n/g,\n    _ = {\n      map: require('lodash/map')\n    };\n\nexports.serialize = function() {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray();\n\n  // Serialize each element into a key/value string\n  var retArr = _.map(arr, function(data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  });\n\n  // Return the resulting serialization\n  return retArr.join('&').replace(r20, '+');\n};\n\nexports.serializeArray = function() {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function() {\n      var elem = this;\n      var $elem = Cheerio(elem);\n      if (elem.name === 'form') {\n        return $elem.find(submittableSelector).toArray();\n      } else {\n        return $elem.filter(submittableSelector).toArray();\n      }\n    }).filter(\n        // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n        '[name!=\"\"]:not(:disabled)'\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        + ':not(:submit, :button, :image, :reset, :file)'\n        // and are either checked/don't have a checkable state\n        + ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    ).map(function(i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var value = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n      if (value == null) {\n        value = '';\n      }\n\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n      if (Array.isArray(value)) {\n        return _.map(value, function(val) {\n          // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n          //   These can occur inside of `<textarea>'s`\n          return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n        });\n      // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n      } else {\n        return {name: name, value: value.replace( rCRLF, '\\r\\n' )};\n      }\n    // Convert our result to an array\n    }).get();\n};\n"]},"metadata":{},"sourceType":"script"}