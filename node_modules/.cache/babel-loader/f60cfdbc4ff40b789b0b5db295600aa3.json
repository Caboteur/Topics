{"ast":null,"code":"'use strict'; // We define these manually to ensure they're always copied\n// even if they would move up the prototype chain\n// https://nodejs.org/api/http.html#http_class_http_incomingmessage\n\nvar knownProps = ['destroy', 'setTimeout', 'socket', 'headers', 'trailers', 'rawHeaders', 'statusCode', 'httpVersion', 'httpVersionMinor', 'httpVersionMajor', 'rawTrailers', 'statusMessage'];\n\nmodule.exports = function (fromStream, toStream) {\n  var fromProps = new Set(Object.keys(fromStream).concat(knownProps));\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = fromProps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var prop = _step.value;\n\n      // Don't overwrite existing properties\n      if (prop in toStream) {\n        continue;\n      }\n\n      toStream[prop] = typeof fromStream[prop] === 'function' ? fromStream[prop].bind(fromStream) : fromStream[prop];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/MegaSync/proxy-server/testing/react-express-starter/node_modules/mimic-response/index.js"],"names":["knownProps","module","exports","fromStream","toStream","fromProps","Set","Object","keys","concat","prop","bind"],"mappings":"AAAA,a,CAEA;AACA;AACA;;AACA,IAAMA,UAAU,GAAG,CAClB,SADkB,EAElB,YAFkB,EAGlB,QAHkB,EAIlB,SAJkB,EAKlB,UALkB,EAMlB,YANkB,EAOlB,YAPkB,EAQlB,aARkB,EASlB,kBATkB,EAUlB,kBAVkB,EAWlB,aAXkB,EAYlB,eAZkB,CAAnB;;AAeAC,MAAM,CAACC,OAAP,GAAiB,UAACC,UAAD,EAAaC,QAAb,EAA0B;AAC1C,MAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBM,MAAxB,CAA+BT,UAA/B,CAAR,CAAlB;AAD0C;AAAA;AAAA;;AAAA;AAG1C,yBAAmBK,SAAnB,8HAA8B;AAAA,UAAnBK,IAAmB;;AAC7B;AACA,UAAIA,IAAI,IAAIN,QAAZ,EAAsB;AACrB;AACA;;AAEDA,MAAAA,QAAQ,CAACM,IAAD,CAAR,GAAiB,OAAOP,UAAU,CAACO,IAAD,CAAjB,KAA4B,UAA5B,GAAyCP,UAAU,CAACO,IAAD,CAAV,CAAiBC,IAAjB,CAAsBR,UAAtB,CAAzC,GAA6EA,UAAU,CAACO,IAAD,CAAxG;AACA;AAVyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW1C,CAXD","sourcesContent":["'use strict';\n\n// We define these manually to ensure they're always copied\n// even if they would move up the prototype chain\n// https://nodejs.org/api/http.html#http_class_http_incomingmessage\nconst knownProps = [\n\t'destroy',\n\t'setTimeout',\n\t'socket',\n\t'headers',\n\t'trailers',\n\t'rawHeaders',\n\t'statusCode',\n\t'httpVersion',\n\t'httpVersionMinor',\n\t'httpVersionMajor',\n\t'rawTrailers',\n\t'statusMessage'\n];\n\nmodule.exports = (fromStream, toStream) => {\n\tconst fromProps = new Set(Object.keys(fromStream).concat(knownProps));\n\n\tfor (const prop of fromProps) {\n\t\t// Don't overwrite existing properties\n\t\tif (prop in toStream) {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttoStream[prop] = typeof fromStream[prop] === 'function' ? fromStream[prop].bind(fromStream) : fromStream[prop];\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}