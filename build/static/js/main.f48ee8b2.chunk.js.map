{"version":3,"sources":["logo.svg","components/ButtonTrend.js","components/Viewer.js","components/Container.js","App.js","serviceWorker.js","index.js","components/ButtonTrend.module.css","components/Container.module.css"],"names":["module","exports","ButtonTrend","id","this","props","onClick","click","className","styles","Button","title","Component","Viewer","articles","style","display","href","wiki","googleSearch","twitterSearch","url","source","url1","title1","source1","Container","state","reponse","reponseFR","reponseUS","reponseDE","value","country","News","fetch","response","json","body","console","log","setState","event","target","e","elem","innerHTML","wikipedia","document","getElementById","articleContainerFull","data","apiUrl","find","then","page","raw","fullurl","search","selectContainer","selector","onChange","handleChange","bind","map","options","dataConatainer","trend","index","articleContainer","handleClick","key","topic","query","outro","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f48ee8b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e76ea132.svg\";","import React, { Component } from 'react';\r\nimport styles from './ButtonTrend.module.css';\r\n\r\nclass ButtonTrend extends Component {\r\n\r\n  render() {\r\n    return (\r\n\r\n      <button id={this.props.id} onClick={this.props.click} className={styles.Button}>\r\n        {this.props.title}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonTrend;\r\n","import React, { Component } from 'react';\r\nimport styles from './ButtonTrend.module.css';\r\n\r\nclass Viewer extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.articles} style={{display:this.props.display}}>\r\n\r\n      <h1><a href={this.props.wiki}>{this.props.wiki}</a></h1>\r\n      <h1><a href={this.props.googleSearch}>{this.props.googleSearch}</a></h1>\r\n      <h1><a href={this.props.twitterSearch}>{this.props.twitterSearch}</a></h1>\r\n\r\n      {this.props.url?   <div><h1><a href={this.props.url}> {this.props.title}</a></h1>\r\n      <p>{this.props.url.source} </p> </div> : <h1></h1> }\r\n\r\n    //  {this.props.url1?   <div><h1><a href={this.props.url1}> {this.props.title1}</a></h1>\r\n      //<p>{this.props.url.source1} </p> </div> : <h1></h1> }\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Viewer;\r\n","import React, { Component } from 'react';\r\nimport ButtonTrend from './ButtonTrend.js'\r\nimport styles from './Container.module.css';\r\nimport axios from 'axios';\r\nimport Datas from './Api/Api-request.js'\r\nimport Viewer from './Viewer.js'\r\nimport wiki from 'wikijs'\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reponse:[],\r\n      reponseFR:[],\r\n      reponseUS:[],\r\n      reponseDE:[],\r\n      wiki:\"Sam\",\r\n      value:\"FR\",\r\n      display:\"none\",\r\n      googleSearch:\"Sam\",\r\n      twitterSearch:\"Sam,\",\r\n      country:  [\"FR\",\"US\",\"DE\",\"GB\",\"IT\",\"BE\",\"IN\"]\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.News()\r\n  }\r\n\r\n\r\n  async News(){\r\n    const response= await fetch('/news-trend-'+this.state.value);\r\n    const body = await response.json();\r\n    console.log(body)\r\n    this.setState( {reponse:body})\r\n\r\n  }\r\n\r\n  handleChange (event){\r\n    this.setState({value: event.target.value}, ()=>{\r\n    this.News();\r\n    })\r\n\r\n  }\r\n\r\n  handleClick(e){\r\n    if (this.state.display==\"none\"){\r\n      this.setState({display:\"inherit\"});\r\n    }else{\r\n      this.setState({display:\"none\"});\r\n    }\r\n    const elem = e.target.innerHTML\r\n    const id = e.target.id;\r\n    this.wikipedia(elem);\r\n    this.googleSearch(elem);\r\n    this.twitterSearch(elem);\r\n    const element = document.getElementById(id)\r\n    element.className=styles.articleContainerFull\r\n    //  elemtn.classList.remove(\"styles.articleContainerFull\")\r\n  }\r\n\r\n  wikipedia (data){\r\n    wiki({ apiUrl: 'https://fr.wikipedia.org/w/api.php' })\r\n    .find(data)\r\n    .then(page => this.setState({wiki:page.raw.fullurl} ))\r\n  }\r\n\r\n  googleSearch(data){\r\n    const search = 'https://www.google.com/search?q='+data;\r\n    this.setState({googleSearch:search})\r\n  }\r\n\r\n  twitterSearch(data){\r\n    const search = 'https://twitter.com/search?q='+data+'&src=typed_query'\r\n    this.setState({twitterSearch:search})\r\n  }\r\n\r\n  render(props) {\r\n\r\n    return (\r\n      <div className={styles.Container}>\r\n      <div className={styles.selectContainer}>\r\n      <select  className={styles.selector} onChange={this.handleChange.bind(this)} value={this.state.value}>\r\n\r\n      {this.state.country.map((country)=>\r\n       <option className={styles.options} value={country}>{country}</option>\r\n\r\n      )}\r\n</select>\r\n\r\n      </div>\r\n      <div className={styles.dataConatainer}>\r\n      {\r\n        this.state.reponse.map((trend, index) =>\r\n        <div id={index} className={styles.articleContainer}>\r\n\r\n        <ButtonTrend id={index} click={this.handleClick.bind(this)} key={index} title={trend.topic.title.query}/>\r\n\r\n        <Viewer wiki={this.state.wiki}\r\n         googleSearch={this.state.googleSearch}\r\n         twitterSearch={this.state.twitterSearch}\r\n         display={this.state.display}\r\n         source={trend.topic.articles[0].source}\r\n         title={trend.topic.articles[0].title}\r\n         url={trend.topic.articles[0].url}\r\n         />\r\n\r\n        </div>\r\n\r\n      )}\r\n      <div className={styles.outro}></div>\r\n      </div>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Container from './components/Container.js'\r\nimport logo from './logo.svg';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1 className=\"title\">Les 5 tendances de recherches google du jour.</h1>\r\n        <Container />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ButtonTrend_Button__ox2sr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"articles\":\"Container_articles__1bh4I\",\"articleLink\":\"Container_articleLink__3mvi0\",\"articleContainer\":\"Container_articleContainer__3x0qW\",\"articleContainerFull\":\"Container_articleContainerFull__3YMzn\",\"options\":\"Container_options__3RI-i\",\"selector\":\"Container_selector__2dSGT\",\"Container\":\"Container_Container__2NdiK\",\"outro\":\"Container_outro__cYMyP\"};"],"sourceRoot":""}